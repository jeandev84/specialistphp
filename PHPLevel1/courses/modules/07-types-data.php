<?php
declare(strict_types=1); // PHP 7.0

/*
Язык PHP - это язык НЕСТРОГАЯ ТИПИЗАЦИЯ ДАННЫХ
Потому что по сути можно хранить в любой переменный что угодно,
Чтобы включить строгая типизации PHP ну написать перед тем пишем код declare(strict_types=1)

(8)типов данных у PHP

1. Скалярный тип (простые типы примитивные типы)
INTEGER
FLOAT
STRING
BOOLEAN

2. Специальный тип
NULL


3. Сложные типы (они состоят из других типа)
ARRAY
OBJECT
RESOURCE (например папка)

*/

// ТИП ДАННЫХ

// 1. ТИПЫ ДАННЫХ: Числа (INTEGER)
# Целые числа (integer)
$int = 1234;  // десятичное число
$int = -123;  // отрицательное число
$int = 0123;  // восьмеричное число (эквивалентно 83 в десятичной системе)
# 0 ставится перед числом 123, чтобы дать понять пхп что это восьмеричное число

$int = 0x1A;        // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
$int = 0b11111111;  // двоичное число (эквивалентно 255 в десятичной системе)


// Тип данных плавающий (FLOAT)
# Числа с плавающей точки (float, также известны как double и real)
$float = 1.234;
$float = 1.2e3;
$float = 7E-10;



// ТИПЫ ДАННЫХ: Строки (STRING)
/*
 Строка (string) - это набор символов, где символов в кавычках
 Это любой набор символов
*/
echo 'это простоя строка в апострофах (одинарная кавычка)';
echo "это простоя строка в двойных кавычках";


echo "Это будет развернуто: \n в две строки";
echo 'А это не будет развернуто: \n в две строки';

// Перенос строки
echo "Это перенос\nстроки!";
echo "Табуляция\t";
echo "Hello\n\tworld!";

// Экранирование
echo "He'll'o\n\tworld!";
echo "He\"ll\"o\n\tworld!";
// echo 'He\"ll\"o\n\tworld!';


// Склеить переменных
$name = "John"; $age = 25;
echo "Hello $name!";
echo 'Hello $name!';

echo "Значения переменных $name и $age подставятся в строку";
echo 'А здесь значения переменных $name и $age не разворачивается';



// Шаблонизатор HEREDOC для строки с большим объёмом
echo <<<HEREDOC
Значения переменных $name и $age
  подставятся в "строку", а 'сама' строка развернётся
HEREDOC;


$string = <<<HEREDOC
Значения переменных $name и $age
  подставятся в "строку", а 'сама' строка развернётся
HEREDOC;


echo "He\"ll\"o\n\t$name!";
echo <<<LABEL
He"ll"o
  $name!
LABEL;


// Экранирование переменных
$juice = "apple";

// Проблема
echo "He drank some $juice juice.";
echo "He drank some juice made of $juices.";


// Решение [ echo "He drank some juice made of $juices."; ]
// Выводится "He drank some juice made of apples.";
echo "He drank some juice made of {$juice}s.";
echo "He drank some juice made of ${juice}s.";



// Доступ к символу в строке (фактически, к байту!)
$str = 'This is a test.';


// $str{индекс} - такой синтекс работает когда у нас латинские символы
// это на уровень байта
// Получение первого символа в строке (получаем первый байт)
$firstSymbol = $str{0};


// Получение третьего символа в строке (получаем третий байт)
$thirdSymbol = $str{2};



// Получение последнего символа в строке (получаем последний байт)
// Стройная пхп функция strlen($str) : считает количество байтов строка
echo strlen($str); // 15
$lastSymbol = $str{ strlen($str) - 1 }; // 14 позиция байта


// Изменение последнего символа в строке
$str{ strlen($str) - 1 } = '!';



// ТИПЫ ДАННЫХ (BOOLEAN и NULL)
$x = true;  // присвоить $x значение TRUE
$y = false; // присвоить $y значение FALSE


$z = null;  // присвоить $z значение NULL

unset($x);

// Возвращает тип данных
echo gettype($x); // NULL


// НЕЯВНОЕ ПРЕОБРАЗОВАНИЕ
echo true;  // 1
echo false; // 0

// PHP отдает браузер СТРОКА ВСЕГДА
// true  = "1"
// false = ""


// ТИП ДАННЫХ NULL (Означает ничего не является)
// Это "", 0, [], false, unset($x); echo $x; echo null;
$x = null;


echo gettype($x);
$y = 1;
echo gettype($y);
echo gettype(NULL);



// ТИПЫ ДАННЫХ: МАССИВ
// МАССИВ - это как ячейка который умеет хранить множественные значения разных типов
// Создание пустого массива

# 1. МАССИВ ИНДЕКСИРОВАННЫЙ
// Используется хранения данных однатипные
$arr = []; // До PHP 5.4 $arr = array();


// Создание массив с элементами
$arr = ["John", "root", "1234"]; // До PHP 5.4 $arr = array("John", "root", "1234");


// Обращение к элементу массива
echo $arr[1]; // root


// Добавление элементов в массив
$arr[] = 25;
$arr[] = true;


// Сколько элементов в массиве?
echo count($arr); // 5


// Выводим удобочитаемую информацию о переменной
print_r($arr);


// Выводим полную информацию о переменной
var_dump($arr);



// Ещё раз об индексации элементов массива
// Если массив не существует, он будет создан
$arr[]  = 1; // Массив с одним элементом с ключом 0
$arr[5] = 2; // Добавили второй элемент с ключом 5
$arr[]  = 3; // Добавили третий элемент с ключом 6
unset($arr); // Удалили массив
$arr = [12=>1, 5=>2]; // Создали массив из двух элементов с ключам 12 и 5
$arr[] = 3; // Добавим третий элемент с ключом 13
unset($arr[12]); // Удалили элемент массива с ключом 12

// Практика
// $arr = array();
// $arr = [];


// Пользователь
$indexes = [0, 1, 2];
$user    = ["John", "root", "1234"];
echo $user[0];


// добавление элемент в массив
// индекс будет 0
$user[] = 25;
$user[] = true;


// Узнать размер массива
// 5 элементов в массиве $user
//echo count($user);


// Вывод красиво массив
//print_r($user);
/*
Array
(
    [0] => John
    [1] => root
    [2] => 1234
    [3] => 25
    [4] => 1
)
*/

// Вывод более подробно элементов массив
var_dump($user);
/*
array(5) {
  [0] =>
  string(4) "John"
  [1] =>
  string(4) "root"
  [2] =>
  string(4) "1234"
  [3] =>
  int(25)
  [4] =>
  bool(true)
}
*/

// Присвоение свой ключ в массив
$user[99] = 25;
$user[]   = false;
print_r($user);

/*
Array
(
    [0] => John
    [1] => root
    [2] => 1234
    [3] => 25
    [4] => 1
    [99] => 25
    [100] =>
)
*/


// Не упроядочные номер индекса массива
$john = ["John", "root", "1234"];
// echo $user[0];
$john[]   = "г.Москва, ул. Головинское Шоссе, дом 8 корпус 2а";
$john[99] = 25;
$john[7] = true;
print_r($john);

/*
Array
(
    [0] => John
    [1] => root
    [2] => 1234
    [3] => 25
    [4] => 1
    [99] => 25
    [100] =>
)
*/


$john = [1=>"John", 26=>"root", "1234"];
// echo $user[0];
$john[]   = "г.Москва, ул. Головинское Шоссе, дом 8 корпус 2а";
$john[99] = 25;
$john[7] = true;
print_r($john);


$john = [
    1=>"John",
    26=>"root",
    "1234"
];

// echo $user[0];
$john[]   = "г.Москва, ул. Головинское Шоссе, дом 8 корпус 2а";
$john[99] = 25;
$john[7] = true;
unset($user[27]);
print_r($john);


# 2. МАССИВ АССОСИАВННЫЙ
// Используется для хранения различных данных
// Именованные индекс
$user = [
    "name"  => "John",
    "login" => "root",
    "password" => "1234"
];

$user["age"] = 25;
$user[] = true;
print_r($user);

/*
Array
(
    [name] => John
    [login] => root
    [password] => 1234
    [age] => 25
    [0] => 1
)
*/

$user = [
    "name"  => "John",
    "login" => "root",
    "password" => "1234",
    "age" => 24,
    true
];

echo $user["name"]; // John
echo $user[0]; // 1



# 2. МАССИВ МНОГОМЕРНЫЙ
// Содержит другие массивы или различные типы данных
$users[0] = [
  "login" => "john",
  "pass"  => "1234"
];

$users[1] = [
  "login" => "mike",
  "pass"  => "5678"
];

echo $users[1]["login"]; // mike